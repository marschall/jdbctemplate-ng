package com.github.marschall.jdbctemplateng;

import static java.sql.ResultSet.CONCUR_READ_ONLY;
import static java.sql.ResultSet.TYPE_FORWARD_ONLY;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.Map.Entry;
import java.util.Objects;

import javax.sql.DataSource;

import com.github.marschall.jdbctemplateng.api.NamedPreparedStatementSetterFactory;
import com.github.marschall.jdbctemplateng.api.PreparedStatementCreator;
import com.github.marschall.jdbctemplateng.api.PreparedStatementSetter;
import com.github.marschall.jdbctemplateng.api.SQLExceptionAdapter;
import com.github.marschall.jdbctemplateng.api.SqlProvider;

public final class JdbcOperationBuilder {

  private final DataSource dataSource;

  private final SQLExceptionAdapter exceptionAdapter;

  private final NamedPreparedStatementSetterFactory namedPreparedStatementSetterFactory;

  public JdbcOperationBuilder(DataSource dataSource, SQLExceptionAdapter exceptionAdapter, NamedPreparedStatementSetterFactory namedPreparedStatementSetterFactory) {
    this.exceptionAdapter = exceptionAdapter;
    Objects.requireNonNull(dataSource, "dataSource");
    Objects.requireNonNull(exceptionAdapter, "exceptionAdapter");
    Objects.requireNonNull(namedPreparedStatementSetterFactory, "namedPreparedStatementSetterFactory");
    this.dataSource = dataSource;
    this.namedPreparedStatementSetterFactory = namedPreparedStatementSetterFactory;
  }

  public JdbcOperationBuilder(DataSource dataSource) {
    this(dataSource, UncheckedSQLExceptionAdapter.INSTANCE, new UnsupportedNamedPreparedStatementSetterFactory(UncheckedSQLExceptionAdapter.INSTANCE));
  }

  public void execute(String sql) {
    try (Connection connection = this.dataSource.getConnection();
         Statement statement = connection.createStatement()) {
      statement.execute(sql);
    } catch (SQLException e) {
      throw this.exceptionAdapter.translate(sql, e);
    }
  }

  public QueryUnboundStatementProcessor query(PreparedStatementCreator preparedStatementCreator) {
    Objects.requireNonNull(preparedStatementCreator, "preparedStatementCreator");
    return new QueryUnboundStatementProcessor(this.dataSource, this.exceptionAdapter, preparedStatementCreator, this.namedPreparedStatementSetterFactory);
  }

  public QueryUnboundStatementProcessor query(String sql) {
    Objects.requireNonNull(sql, "sql");
    return this.query(sql, TYPE_FORWARD_ONLY, CONCUR_READ_ONLY);
  }

  public QueryUnboundStatementProcessor query(String sql, int resultSetType, int resultSetConcurrency) {
    Objects.requireNonNull(sql, "sql");
    return this.query(new StringPreparedStatementCreator(sql, resultSetType, resultSetConcurrency));
  }

  public QueryUnboundStatementProcessor query(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
    Objects.requireNonNull(sql, "sql");
    return this.query(new StringPreparedStatementCreatorWithHoldability(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
  }

  public UpdateUnboundStatementProcessor update(String sql) {
    Objects.requireNonNull(sql, "sql");
    return this.update(new StringPreparedStatementCreator(sql));
  }

  public UpdateUnboundStatementProcessor update(String sql, int autoGeneratedKeys) {
    Objects.requireNonNull(sql, "sql");
    return this.update(new StringPreparedStatementCreatorWithGeneratedKeys(sql, autoGeneratedKeys));
  }

  public UpdateUnboundStatementProcessor update(String sql, int[] columnIndexes) {
    Objects.requireNonNull(sql, "sql");
    Objects.requireNonNull(columnIndexes, "columnIndexes");
    return this.update(new StringPreparedStatementCreatorWithColumnIndexes(sql, columnIndexes));
  }

  public UpdateUnboundStatementProcessor update(String sql, String[] columnNames) {
    Objects.requireNonNull(sql, "sql");
    Objects.requireNonNull(columnNames, "columnNames");
    return this.update(new StringPreparedStatementCreatorWithColumnNames(sql, columnNames));
  }

  public UpdateUnboundStatementProcessor update(PreparedStatementCreator preparedStatementCreator) {
    Objects.requireNonNull(preparedStatementCreator, "preparedStatementCreator");
    return new UpdateUnboundStatementProcessor(this.dataSource, this.exceptionAdapter, preparedStatementCreator, this.namedPreparedStatementSetterFactory);
  }

  public BatchUnboundStatementProcessor batchUpdate(String sql) {
    Objects.requireNonNull(sql, "sql");
    return this.batchUpdate(new StringPreparedStatementCreator(sql));
  }

  public BatchUnboundStatementProcessor batchUpdate(String sql, int autoGeneratedKeys) {
    Objects.requireNonNull(sql, "sql");
    return this.batchUpdate(new StringPreparedStatementCreatorWithGeneratedKeys(sql, autoGeneratedKeys));
  }

  public BatchUnboundStatementProcessor batchUpdate(String sql, int[] columnIndexes) {
    Objects.requireNonNull(sql, "sql");
    Objects.requireNonNull(columnIndexes, "columnIndexes");
    return this.batchUpdate(new StringPreparedStatementCreatorWithColumnIndexes(sql, columnIndexes));
  }

  public BatchUnboundStatementProcessor batchUpdate(String sql, String[] columnNames) {
    Objects.requireNonNull(sql, "sql");
    Objects.requireNonNull(columnNames, "columnNames");
    return this.batchUpdate(new StringPreparedStatementCreatorWithColumnNames(sql, columnNames));
  }

  public BatchUnboundStatementProcessor batchUpdate(PreparedStatementCreator preparedStatementCreator) {
    Objects.requireNonNull(preparedStatementCreator, "preparedStatementCreator");
    return new BatchUnboundStatementProcessor(this.dataSource, this.exceptionAdapter, preparedStatementCreator, this.namedPreparedStatementSetterFactory);
  }

  static final class UnsupportedNamedPreparedStatementSetterFactory implements NamedPreparedStatementSetterFactory {

    private final SQLExceptionAdapter exceptionAdapter;

    UnsupportedNamedPreparedStatementSetterFactory(SQLExceptionAdapter exceptionAdapter) {
      this.exceptionAdapter = exceptionAdapter;
    }

    @Override
    public PreparedStatementSetter newNamedPreparedStatementSetter(Collection<Entry<String, Object>> namedParameters) {
      throw this.exceptionAdapter.unsupportedFeature("named parameters");
    }

  }

  static final class StringPreparedStatementCreator implements PreparedStatementCreator, SqlProvider {

    private final String sql;
    private final int resultSetType;
    private final int resultSetConcurrency;

    StringPreparedStatementCreator(String sql, int resultSetType, int resultSetConcurrency) {
      this.sql = sql;
      this.resultSetType = resultSetType;
      this.resultSetConcurrency = resultSetConcurrency;
    }

    StringPreparedStatementCreator(String sql) {
      this(sql, TYPE_FORWARD_ONLY, CONCUR_READ_ONLY);
    }

    @Override
    public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
      return connection.prepareStatement(this.sql, this.resultSetType, this.resultSetConcurrency);
    }

    @Override
    public String getSql() {
      return this.sql;
    }

  }

  static final class StringPreparedStatementCreatorWithHoldability implements PreparedStatementCreator, SqlProvider {

    private final String sql;
    private final int resultSetType;
    private final int resultSetConcurrency;
    private final int resultSetHoldability;

    StringPreparedStatementCreatorWithHoldability(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
      this.sql = sql;
      this.resultSetType = resultSetType;
      this.resultSetConcurrency = resultSetConcurrency;
      this.resultSetHoldability = resultSetHoldability;
    }

    @Override
    public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
      return connection.prepareStatement(this.sql, this.resultSetType, this.resultSetConcurrency, this.resultSetHoldability);
    }

    @Override
    public String getSql() {
      return this.sql;
    }

  }

  static final class StringPreparedStatementCreatorWithGeneratedKeys implements PreparedStatementCreator, SqlProvider {

    private final String sql;
    private final int autoGeneratedKeys;

    StringPreparedStatementCreatorWithGeneratedKeys(String sql, int autoGeneratedKeys) {
      this.sql = sql;
      this.autoGeneratedKeys = autoGeneratedKeys;
    }

    @Override
    public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
      return connection.prepareStatement(this.sql, this.autoGeneratedKeys);
    }

    @Override
    public String getSql() {
      return this.sql;
    }

  }

  static final class StringPreparedStatementCreatorWithColumnIndexes implements PreparedStatementCreator, SqlProvider {

    private final String sql;
    private final int columnIndexes[];

    StringPreparedStatementCreatorWithColumnIndexes(String sql, int[] columnIndexes) {
      this.sql = sql;
      this.columnIndexes = columnIndexes;
    }

    @Override
    public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
      return connection.prepareStatement(this.sql, this.columnIndexes);
    }

    @Override
    public String getSql() {
      return this.sql;
    }

  }

  static final class StringPreparedStatementCreatorWithColumnNames implements PreparedStatementCreator, SqlProvider {

    private final String sql;
    private final String[] columnNames;

    StringPreparedStatementCreatorWithColumnNames(String sql, String[] columnNames) {
      this.sql = sql;
      this.columnNames = columnNames;
    }

    @Override
    public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
      return connection.prepareStatement(this.sql, this.columnNames);
    }

    @Override
    public String getSql() {
      return this.sql;
    }

  }

}
