package com.github.marschall.jdbctemplateng;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.derby.jdbc.EmbeddedDataSource;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

class DerbyGeneratedKeysTest {

  @Test
  void generatedKeysNonBatch() throws SQLException {

    EmbeddedDataSource derbyDataSource = new EmbeddedDataSource();
    derbyDataSource.setDatabaseName("memory:test1");
    derbyDataSource.setCreateDatabase("create");


    try (Connection connection = derbyDataSource.getConnection()) {

      try (Statement statement = connection.createStatement()) {
        statement.execute("CREATE TABLE test_table ("
                + "id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,"
                + "test_value INTEGER"
                + ")");
      }

      try (PreparedStatement preparedStatement = connection.prepareStatement(
              "INSERT INTO test_table(test_value) VALUES (?)",
              Statement.RETURN_GENERATED_KEYS)) {
        preparedStatement.setObject(1, Integer.valueOf(42));

        int updateCount = preparedStatement.executeUpdate();
        assertEquals(1, updateCount);

        int numGeneratedKeys = 0;
        try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
          while (generatedKeys.next()) {
            assertEquals(Integer.valueOf(1), generatedKeys.getObject(1, Integer.class));
            numGeneratedKeys += 1;
          }
        }
        assertEquals(1, numGeneratedKeys);
      }
    }
  }

  @Test
  @Disabled("Derby bug")
  void generatedKeysBatch() throws SQLException {
    // https://issues.apache.org/jira/browse/DERBY-6994
    // https://issues.apache.org/jira/browse/DERBY-3609

    EmbeddedDataSource derbyDataSource = new EmbeddedDataSource();
    derbyDataSource.setDatabaseName("memory:test");
    derbyDataSource.setCreateDatabase("create");


    try (Connection connection = derbyDataSource.getConnection()) {

      try (Statement statement = connection.createStatement()) {
        statement.execute("CREATE TABLE test_table ("
                + "id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,"
                + "test_value INTEGER"
                + ")");
      }

      try (PreparedStatement preparedStatement = connection.prepareStatement(
              "INSERT INTO test_table(test_value) VALUES (?)",
              Statement.RETURN_GENERATED_KEYS)) {
        preparedStatement.setObject(1, Integer.valueOf(42));
        preparedStatement.addBatch();
        preparedStatement.setObject(1, Integer.valueOf(43));
        preparedStatement.addBatch();

        int[] updateCount = preparedStatement.executeBatch();
        assertArrayEquals(new int[] {1, 1}, updateCount, "update count");

        List<Integer> generatedIntegers = new ArrayList<>(2);
        try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
          while (generatedKeys.next()) {
            generatedIntegers.add(generatedKeys.getObject(1, Integer.class));
          }
        }
        assertEquals(Arrays.asList(1, 2), generatedIntegers, "generated keys");
      }
    }
  }

}
